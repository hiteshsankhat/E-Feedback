/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package e.fd;

import Connect.JavaConnectDB;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author hites
 */
public class pclass extends javax.swing.JFrame {

    Connection con = null, con1 = null;
    OraclePreparedStatement pst = null;
    OracleResultSet rs = null;
    OracleResultSet rs1 = null;
    String branch = null;
    String semester, div, name = null, surname = null, subject, initial = null, sub = null;
    int total = 0, count = 0, out = 0;
    float avg = 0;

    /**
     * Creates new form pclass
     */
    public pclass() {
        initComponents();
        TableColumnModel columnModel = Result.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(20);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(100);
        columnModel.getColumn(3).setPreferredWidth(20);
    }

    private void wte(String p) {
        String path = p;
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet ws = wb.createSheet();

        TreeMap<String, Object[]> data = new TreeMap<>();
        data.put("0", new Object[]{Result.getColumnName(0), Result.getColumnName(1), Result.getColumnName(2), Result.getColumnName(3)});
        String aaa = null;
        for (int i = 0; i < Result.getRowCount(); i++) {
            int z = i + 1;
            aaa = aaa + z;
            data.put(aaa, new Object[]{Result.getValueAt(i, 0), Result.getValueAt(i, 1), Result.getValueAt(i, 2), Result.getValueAt(i, 3)});
        }
        Set<String> ids = data.keySet();
        XSSFRow row;
        int rowID = 0;
        for (String key : ids) {
            row = ws.createRow(rowID++);
            Object[] values = data.get(key);
            int cellID = 0;
            for (Object o : values) {
                XSSFCell cell = row.createCell(cellID++);
                cell.setCellValue(o.toString());
            }
        }
        try {
            FileOutputStream fos = new FileOutputStream(new File(path));
            wb.write(fos);
            fos.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        Th = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        semester_box = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        Student_Div_A = new javax.swing.JRadioButton();
        Student_Div_B = new javax.swing.JRadioButton();
        Student_Div_C = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        branch_box = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Result = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Th.setText("view");
        Th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThActionPerformed(evt);
            }
        });

        jLabel1.setText("Semester:-");

        semester_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Division:-");

        buttonGroup1.add(Student_Div_A);
        Student_Div_A.setText("A");

        buttonGroup1.add(Student_Div_B);
        Student_Div_B.setText("B");

        buttonGroup1.add(Student_Div_C);
        Student_Div_C.setText("C");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Branch:-");

        branch_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "CO", "EJ", "IF" }));
        branch_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branch_boxActionPerformed(evt);
            }
        });

        Result.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TH/PR", "Name ", "Subject", "Average"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Result.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Result);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(branch_box, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1)
                                .addGap(50, 50, 50)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(semester_box, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Student_Div_A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Student_Div_B)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Student_Div_C))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Th, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)))
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Student_Div_A, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Student_Div_B, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Student_Div_C, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(semester_box))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(branch_box, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Th)
                        .addComponent(jButton2)))
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new principal().setVisible(true);
        this.dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ThActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThActionPerformed
        con1 = JavaConnectDB.ConnectDB();
        con = JavaConnectDB.ConnectDB();

        if (Student_Div_A.isSelected()) {
            div = Student_Div_A.getText();
        }
        if (Student_Div_B.isSelected()) {
            div = Student_Div_B.getText();
        }
        if (Student_Div_C.isSelected()) {
            div = Student_Div_C.getText();
        }
        semester = (String) semester_box.getSelectedItem();
        DefaultTableModel th_dtm = (DefaultTableModel) Result.getModel();

        while (th_dtm.getRowCount() > 0) {
            for (int i = 0; i < th_dtm.getRowCount(); i++) {
                th_dtm.removeRow(i);
            }
        }
        String sql = "select full_sub_name,THEORY_NAME_OF_PROF, subject from SUBJECT_INFO where branch=? AND division=? AND semester=? AND THEORY_NAME_OF_PROF is not null";
        String sql1 = "select name, surname from staff_info where initials=?";
        String sql2 = "select sum(v.total),count(v.total) from FEEDBACK_RESULT_TABLE n, table(n.th) v  where v.name_of_prof=? AND subject=? AND v.total is not null and division=?";
        String sql4 = "select full_sub_name,PRACTICAL_NAME_OF_PROF, subject from SUBJECT_INFO where branch=? AND division=? AND semester=? AND PRACTICAL_NAME_OF_PROF is not null";
        String sql5 = "select name, surname from staff_info where initials=?";
        String sql6 = "select sum(v.total),count(v.total) from FEEDBACK_RESULT_TABLE n, table(n.pr) v  where v.name_of_prof=? AND subject=? AND v.total is not null and division=?";
        try {
            pst = (OraclePreparedStatement) con1.prepareStatement(sql);
            pst.setString(1, branch);
            pst.setString(2, div);
            pst.setString(3, semester);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next()) {
                initial = rs.getString("THEORY_NAME_OF_PROF");
                sub = rs.getString("full_sub_name");
                subject = rs.getString("subject");

                pst = (OraclePreparedStatement) con1.prepareStatement(sql1);
                pst.setString(1, initial);
                rs1 = (OracleResultSet) pst.executeQuery();
                while (rs1.next()) {
                    name = rs1.getString("name");
                    surname = rs1.getString("surname");
                    name = name.concat(" ").concat(surname);
                }

                pst = (OraclePreparedStatement) con1.prepareStatement(sql2);
                pst.setString(1, initial);
                pst.setString(2, sub);
                pst.setString(3, div);
                rs1 = (OracleResultSet) pst.executeQuery();
                while (rs1.next()) {
                    total = rs1.getInt("sum(v.total)");
                    count = rs1.getInt("count(v.total)");
                    out = count * 16;
                    avg = ((float) total / count) / 4;
                }
                if (avg >= 0 && avg <= 100) {
                } else {
                    avg = 0;
                }

                DefaultTableModel model2 = (DefaultTableModel) Result.getModel();
                model2.insertRow(Result.getRowCount(), new Object[]{"Th", name, sub, new DecimalFormat("##.##").format(avg)});
                name = null;
                surname = null;
            }
            DefaultTableModel model = (DefaultTableModel) Result.getModel();
            model.insertRow(Result.getRowCount(), new Object[]{"-", "-", "-", "-"});
            pst = (OraclePreparedStatement) con.prepareStatement(sql4);
            pst.setString(1, branch);
            pst.setString(2, div);
            pst.setString(3, semester);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next()) {
                initial = rs.getString("PRACTICAL_NAME_OF_PROF");
                sub = rs.getString("full_sub_name");
                subject = rs.getString("subject");

                pst = (OraclePreparedStatement) con.prepareStatement(sql5);
                pst.setString(1, initial);
                rs1 = (OracleResultSet) pst.executeQuery();
                while (rs1.next()) {
                    name = rs1.getString("name");
                    surname = rs1.getString("surname");
                    name = name.concat(" ").concat(surname);
                }

                pst = (OraclePreparedStatement) con.prepareStatement(sql6);
                pst.setString(1, initial);
                pst.setString(2, sub);
                pst.setString(3, div);
                rs1 = (OracleResultSet) pst.executeQuery();
                while (rs1.next()) {
                    total = rs1.getInt("sum(v.total)");
                    count = rs1.getInt("count(v.total)");
                    out = count * 16;
                    avg = ((float) total / count) / 4;
                }
                if (avg >= 0 && avg <= 100) {
                } else {
                    avg = 0;
                }
                DefaultTableModel model1 = (DefaultTableModel) Result.getModel();
                model1.insertRow(Result.getRowCount(), new Object[]{"Pr", name, sub, new DecimalFormat("##.##").format(avg)});
                name = null;
                surname = null;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ThActionPerformed

    private void branch_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branch_boxActionPerformed
        branch = (String) branch_box.getSelectedItem();        // TODO add your handling code here:
    }//GEN-LAST:event_branch_boxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Save Excel File");
        int res = jf.showSaveDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            String Excelpath = jf.getSelectedFile().getAbsolutePath();
            wte(Excelpath + ".xlsx");
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pclass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Result;
    private javax.swing.JRadioButton Student_Div_A;
    private javax.swing.JRadioButton Student_Div_B;
    private javax.swing.JRadioButton Student_Div_C;
    private javax.swing.JButton Th;
    private javax.swing.JComboBox branch_box;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox semester_box;
    // End of variables declaration//GEN-END:variables
}
